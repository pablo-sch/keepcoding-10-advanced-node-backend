openapi: 3.0.0
info:
  title: Posts API
  version: 1.0.0
  description: API for managing posts with authentication.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Post:
      type: object
      properties:
        id:
          type: string
          description: Post ID
        name:
          type: string
          description: Name of the post
        price:
          type: number
          description: Price of the product
        tag:
          type: string
          description: Tag or category
        photo:
          type: string
          description: URL or filename of the photo
      required:
        - id
        - name
        - price
        - tag

security:
  - bearerAuth: []

paths:
  /api/login:
    post:
      tags:
        - Auth
      summary: Login user and return JWT token
      description: Authenticates the user with email and password and returns a JWT token along with user info.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address.
                password:
                  type: string
                  format: password
                  description: User's password.
      responses:
        200:
          description: Login successful, returns JWT and user info.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  tokenJWT:
                    type: string
                    description: JWT token for authenticated requests.
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        description: User ID.
                      name:
                        type: string
                        description: User's name.
                      email:
                        type: string
                        format: email
                        description: User's email.
                      avatar:
                        type: string
                        description: URL or filename of user's avatar.
        401:
          description: Invalid credentials

  /api/posts:
    get:
      tags:
        - Posts
      summary: Get a list of posts for the authenticated user (Supports filtering)
      description: Returns a list of posts belonging to the authenticated user. Supports filtering by name or tag, pagination, sorting, and field selection.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Filter posts by name (case-insensitive, partial match)
        - in: query
          name: tag
          schema:
            type: string
          description: Filter posts by exact tag
        - in: query
          name: limit
          schema:
            type: integer
          description: Maximum number of posts to return (default 10)
        - in: query
          name: skip
          schema:
            type: integer
          description: Number of posts to skip (used for pagination)
        - in: query
          name: sort
          schema:
            type: string
          description: Field to sort the results by
        - in: query
          name: fields
          schema:
            type: string
          description: Comma-separated list of fields to return
        - in: query
          name: count
          schema:
            type: boolean
          description: If true, also returns the total count of matching documents
      responses:
        "200":
          description: A list of posts and optionally the total count
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  count:
                    type: integer
                    description: Total count of matching posts
                    example: 42
        "401":
          description: Unauthorized - Missing or invalid JWT token

    post:
      tags:
        - Posts
      summary: Create a new post.
      description: Creates a new post for the authenticated user. The image is optional; if none is uploaded, a default placeholder image ("image-placeholder.jpg") is assigned.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - tag
              properties:
                name:
                  type: string
                  description: The name of the product.
                price:
                  type: number
                  description: The price of the product.
                tag:
                  type: string
                  description: The tag or category of the product.
                  enum:
                    - work
                    - lifestyle
                    - motor
                    - mobile
                photo:
                  type: string
                  format: binary
                  description: Optional image file of the product.
      responses:
        "201":
          description: Post created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Invalid input data.

  /api/posts/{postId}:
    get:
      tags:
        - Posts
      summary: Get a specific post by ID.
      description: Retrieves a single post that belongs to the authenticated user.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the post to retrieve.
      responses:
        "200":
          description: The requested post.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found or does not belong to the user.

    put:
      tags:
        - Posts
      summary: Update a post.
      description: Updates a post that belongs to the authenticated user. If a new image is uploaded, it replaces the old one.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the post to update.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                tag:
                  type: string
                photo:
                  type: string
                  format: binary
      responses:
        "200":
          description: Post updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found or not owned by the user.

    delete:
      tags:
        - Posts
      summary: Delete a post.
      description: Deletes a post that belongs to the authenticated user. If the post includes an image (other than the placeholder), the image file will be removed from the server.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the post to delete.
      responses:
        "200":
          description: Post deleted successfully.
        "401":
          description: Unauthorized. The post does not belong to the user.
        "404":
          description: Post not found.
